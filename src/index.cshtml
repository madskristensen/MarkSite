@using manager = System.Configuration.ConfigurationManager;
@{
	// Make sure all URLs end with a slash
	if (!Request.QueryString["path"].EndsWith("/"))
	{
		Response.RedirectPermanent(Request.QueryString["path"] + "/", true);
	}

	MarkdownPage page = PageSystem.GetCurrentPage(Request);

	Page.Title = page.Parent == null ? manager.AppSettings["name"] : page.Title + " - " + manager.AppSettings["name"];
	Page.Description = page.Description;
	Page.Keywords = page.Keywords;
	Page.Theme = manager.AppSettings["theme"];
	Page.ShowHero = page.Parent == null;

	MarkdownPage next = null;
	MarkdownPage prev = null;

	if (page.Parent == null)
	{
		next = page.Children.FirstOrDefault();
		prev = null;
	}
	else
	{
		int index = page.Parent.Children.IndexOf(page);
		next = index < (page.Parent.Children.Count - 1) ? page.Parent.Children[index + 1] : null;
		prev = index > 0 ? page.Parent.Children[index - 1] : null;
	}

	if (Request.Headers["X-Content-Only"] == "1")
	{
		Response.Headers.Add("X-Title", Page.Title);

		if (next != null)
		{
			Response.Headers.Add("X-Next", Helpers.CreateLink(next));
		}
		if (prev != null)
		{
			Response.Headers.Add("X-Prev", Helpers.CreateLink(prev));
		}
	}
	else
	{
		Layout = "~/themes/" + Page.Theme + "/_layout.cshtml";
	}

	WebPageHttpHandler.DisableWebPagesResponseHeader = true;
	PageSystem.SetCacheHeaders(Context);
}

@section flipahead
{
	@if (next != null)
	{
		<link rel="next" href="@Helpers.CreateLink(next)" />
	}
	@if (prev != null)
	{
		<link rel="prev" href="@Helpers.CreateLink(prev)" />
	}
}

@RenderPage("themes/" + Page.Theme + "/page.cshtml", page)