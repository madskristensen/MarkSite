@using System.Text.RegularExpressions;
@using System.Drawing;
@using System.Configuration;

@functions 
{
	public static string Fingerprint(string rootRelativePath)
	{
		if (Request.IsLocal)
		{
			return rootRelativePath; // So Browser Link's CSS auto-sync works
		}

		string relative = VirtualPathUtility.ToAbsolute("~" + rootRelativePath);
		string absolute = Server.MapPath(relative);

		if (!File.Exists(absolute))
		{
			throw new Exception("File not found " + rootRelativePath);
		}

		DateTime date = File.GetLastWriteTime(absolute);
		int index = relative.LastIndexOf('.');

		return relative.Insert(index, "_" + date.Ticks);
	}

	public static string CreateLink(MarkdownPage page)
	{
		List<string> segments = new List<string>(new[] { page.Slug });
		MarkdownPage parent = page.Parent;

		while (parent != null)
		{
			segments.Add(parent.Slug);
			parent = parent.Parent;
		}

		string path = string.Join("/", segments.Reverse<string>().Skip(1));
		return "/" + (string.IsNullOrEmpty(path) ? string.Empty : path + "/");
	}

	public static string GetDimensions(string relative)
	{
		string absolute = Server.MapPath(relative);
		var img = Bitmap.FromFile(absolute);

		return string.Format("width=\"{0}\" height=\"{1}\"", img.Width, img.Height);
	}
}

@helper RenderContent(MarkdownPage page)
{
	Regex regex = new Regex(@"<img.+(?<attr>src)=""(?<href>[^\""']+)"".*?>");
	Regex h2rgx = new Regex(@"<(?<start>(h2|h3))>(?<inner>[^<]+)<(?<end>/\1)>");
	string baseFolder = ConfigurationManager.AppSettings["pageFolder"].Trim('~', '/');

	string html = regex.Replace(page.Content, delegate (Match match)
	{
		string value = match.Value;
		string href = match.Groups["href"].Value;

		if (href.StartsWith("_assets"))
		{
			string root = page.FileName ?? "";
			int index = root.LastIndexOf('/') + 1;
			string relative = "/" + baseFolder + root.Substring(0, index) + href;
			string newHref = Fingerprint(relative);
			string dimensions = GetDimensions(relative);
			string result = value.Replace(" src=\"" + href, " " + dimensions + " src=\"" + newHref);

			return result;
		}

		return value;
	});

	html = h2rgx.Replace(html, delegate (Match match)
	{
		string value = match.Value;
		string inner = match.Groups["inner"].Value;
		string id = inner.Replace(" ", "-").ToLowerInvariant();
		string result = value.Replace(inner, "<a id=\"" + id + "\" href=\"#" + id + "\">" + inner + "</a>");

		return result;
	});

	@Html.Raw(html)
}